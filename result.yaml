# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
# note- this service runs on port 4000. Unblock inbound access to port 4000 for the vm
# vm1: rai-prod-vm01 http://13.90.98.133:4000/
# vm2: rai-prod-vm02 http://52.168.135.88:4000/


trigger: 
  branches:
    include:
      - master
  paths:
    include:
      - arm-templates/*
      - result.yaml
      - result/*
    exclude:
      - readme.md
      
pr: none    

pool:
  vmImage: 'ubuntu-latest'

variables:
  group: VoterAppSecrets
  system.debug: 'true'
  skipComponentGovernanceDetection: 'true'
  process.clean: 'false'

stages:
- stage: build
  displayName: Build Stage
  jobs:
  - job: build_result
    displayName: Build Vote Result Service
    pool:
      vmImage: 'Ubuntu-latest'
    steps:
    - script: |          
        cd result
        npm install
        npm prune --production
    - task: WhiteSource Bolt@20
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)/result'
        artifact: 'VoteResultService'
        publishLocation: 'pipeline'  

- stage: Dev
  dependsOn: build
  displayName: Deploy to Dev
  jobs:    
  - job: deployVM
    displayName: Create Or Update VM    
    steps:    
    - task: AzureResourceGroupDeployment@2
      displayName: 'Azure Deployment:Create Or Update Resource Group action'
      inputs:
        azureSubscription: 'RMPM (afc11291-9826-46be-b852-70349146ddf8)'
        action: 'Create Or Update Resource Group'
        resourceGroupName: 'ForresterDemo'
        location: 'East US 2'
        templateLocation: 'Linked artifact'
        csmFile: '$(System.DefaultWorkingDirectory)/arm-templates/linux-vm2.json'
        overrideParameters: '-vmName "rai-dev-vm01" -adminUsername "moala" -adminPasswordOrKey "$(vmPassword)"'
        deploymentMode: 'Incremental'
  - deployment: DeployDev
    displayName: Deploy To Dev
    dependsOn: deployVM
    pool:
      vmImage: 'Ubuntu-latest'    
    environment:
      name:  Development
      resourceType: VirtualMachine      
    strategy:                 
      runOnce:              
        deploy:    
          steps:             
          - script: echo deploy app to dev...


- stage: QA
  dependsOn: Dev
  displayName: Deploy to QA
  jobs:    
  - job: deployVM
    displayName: Create Or Update VM    
    steps:    
    - task: AzureResourceGroupDeployment@2
      displayName: 'Azure Deployment:Create Or Update Resource Group action'
      inputs:
        azureSubscription: 'RMPM (afc11291-9826-46be-b852-70349146ddf8)'
        action: 'Create Or Update Resource Group'
        resourceGroupName: 'ForresterDemo'
        location: 'East US 2'
        templateLocation: 'Linked artifact'
        csmFile: '$(System.DefaultWorkingDirectory)/arm-templates/linux-vm2.json'
        overrideParameters: '-vmName "rai-qa-vm01" -adminUsername "moala" -adminPasswordOrKey "$(vmPassword)"'
        deploymentMode: 'Incremental'
  - deployment: DeployQA
    displayName: Deploy To QA
    dependsOn: deployVM
    pool:
      vmImage: 'Ubuntu-latest'    
    environment:
      name:  QA
      resourceType: VirtualMachine      
    strategy:                 
      runOnce:              
        deploy:    
          steps:             
          - script: echo Run installation scripts to deploy to QA...

- stage: Prod
  displayName: Deploy To Production
  dependsOn: QA
  jobs:
  - job: deployVM
    displayName: Create Or Update VM    
    steps:    
    - task: AzureResourceGroupDeployment@2
      displayName: 'Azure Deployment:Create Or Update Resource Group action'
      inputs:
        azureSubscription: 'RMPM (afc11291-9826-46be-b852-70349146ddf8)'
        action: 'Create Or Update Resource Group'
        resourceGroupName: 'ForresterDemo'
        location: 'East US 2'
        templateLocation: 'Linked artifact'
        csmFile: '$(System.DefaultWorkingDirectory)/arm-templates/linux-vm2.json'
        overrideParameters: '-vmName "rai-prod-vm01" -adminUsername "moala" -adminPasswordOrKey "$(vmPassword)"'
        deploymentMode: 'Incremental'
    - task: AzureResourceGroupDeployment@2
      displayName: 'Azure Deployment:Create Or Update Resource Group action'
      inputs:
        azureSubscription: 'RMPM (afc11291-9826-46be-b852-70349146ddf8)'
        action: 'Create Or Update Resource Group'
        resourceGroupName: 'ForresterDemo'
        location: 'East US 2'
        templateLocation: 'Linked artifact'
        csmFile: '$(System.DefaultWorkingDirectory)/arm-templates/linux-vm2.json'
        overrideParameters: '-vmName "rai-prod-vm02" -adminUsername "moala" -adminPasswordOrKey "$(vmPassword)"'
        deploymentMode: 'Incremental'
  - deployment: DeployVoteResultService
    displayName: Depl
    dependsOn: deployVM    
    pool:
      vmImage: 'Ubuntu-latest'    
    environment:
      name:  Production
      resourceType: VirtualMachine
      tags: prod 
    strategy:
      rolling:
        maxParallel: 1
        preDeploy:
          steps:
          - download: current
            artifact: VoteResultService
          - script: echo initialize, cleanup, backup, install certs   
        deploy:
          steps:
          - task: AzureKeyVault@1
            displayName: Fetch Storage Secrets from Azure Key vault
            inputs:
              azureSubscription: 'RMPM (afc11291-9826-46be-b852-70349146ddf8)'
              KeyVaultName: 'ForresterDemoKeyVault'
              SecretsFilter: '*'
          - script: |     
              cd $(System.DefaultWorkingDirectory)/../VoteResultService
              ps -ef | grep server.js | grep -v grep | awk '{print $2}' | xargs kill
              chmod 777 server.js
              chmod 777 deploy.sh
              ls -ltrh
              echo STARTING THE SERVICE...
              export SQL_HOSTNAME=$(azure-sql-hostname-dev)
              export SQL_USERNAME=$(azure-sql-ro-username)
              export SQL_PASSWORD=$(azure-sql-ro-password)
              export PORT=4000
              #node server.js AZURE_STORAGE_ACCOUNT=$(azure-storage-username)  AZURE_STORAGE_ACCESS_KEY= $(azure-storage-key) >> logs_voteresultservice.txt &
              #nohup node server.js >> logs_voteresultservice.txt &
              #node server.js
          - task: Bash@3
            inputs:
              filePath: '$(System.DefaultWorkingDirectory)/../VoteResultService/deploy.sh'
            env:
              SQL_HOSTNAME: $(azure-sql-hostname)
              SQL_USERNAME: $(azure-sql-ro-username)
              SQL_PASSWORD: $(azure-sql-ro-password)
        on:
          failure:
            steps:
            - script: echo deployment failed. Run rollback scripts...
          success:
            steps:
            - script: echo deployment successful. Cleaning up...
